self.avcells*3+self.smooth+self.maxtile*2+self.mon*3
[1024]
[1024, 256]
[1024, 256, 1024]
self.avcells*3+self.smooth+self.maxtile*2+self.mon*3 #con mon additiva
[1024]
[1024, 512]
[1024, 512, 256]
self.avcells*3+self.smooth+self.maxtile*2+self.mon
[512]
self.avcells*3+self.smooth+self.maxtile*2+self.mon*2
[256]
[256, 1024]
[256, 1024, 512]
self.avcells*3+self.smooth+self.maxtile*2+self.mon*2 #con mon solo negativa
[1024]
[1024, 1024]
[1024, 1024, 256]
[1024, 1024, 256, 1024]
[1024, 1024, 256, 1024, 1024]
self.avcells*3+self.adj+self.maxtile*2+self.mon*2 #no smooth, onj adj
[2048]
[2048, 2048]
[2048, 2048, 2048]
[2048, 2048, 2048, 512]
[2048, 2048, 2048, 512, 512]
self.avcells*2.5+self.adj+self.maxtile*2+self.mon*2
[1024]
[1024, 1024]
self.avcells*2.8+self.adj+self.maxtile*5+self.mon*2
[2048]
[2048, 256]
[2048, 256, 2048]
self.avcells*2.8+self.adj+self.maxtile*5+self.mon*2 #same routine optimized
[2048]
[2048, 256]
self.avcells*2.8+self.adj+self.maxtile*5+self.mon*2 #con adj a 2 celle
[1024]
[1024, 512]
self.avcells*2.8+self.adj+self.maxtile*5+self.mon*2 # back to normal adj
[2048]
[2048, 1024]
[2048, 1024, 1024]
[2048, 1024, 1024, 1024]
[2048, 1024, 1024, 1024, 1024]
[2048, 1024, 1024, 1024, 1024, 1024]
self.avcells*3+self.adj+self.maxtile*2+self.mon*2
[2048]
[2048, 512]
[2048, 512, 2048]
[2048, 512, 2048, 1024]
self.avcells*3+self.adj+self.maxtile*2+self.mon*2 #same, probabilità sistemate -sbagliato, solo 2
[1024]
[1024, 2048]
[1024, 2048, 1024]
[1024, 2048, 1024, 2048]
self.avcells*3+self.adj+self.maxtile*2+self.mon*2 #adesso giusto - crashato per 4096
[2048,4096]
self.avcells*3+self.adj+self.maxtile*2+self.mon*2 #adesso giusto - meno bug
[512]
[512, 1024]
[512, 1024, 1024]
self.avcells*3+self.adj+self.maxtile*2+self.mon*2 #same, bug su mon corretto (per ultime righe)
[2048]
[2048, 2048]
[2048, 2048, 1024]
[2048, 2048, 1024, 2048]
[2048, 2048, 1024, 2048, 2048]
[2048, 2048, 1024, 2048, 2048, 2048]
[2048, 2048, 1024, 2048, 2048, 2048, 2048]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 1024]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 1024, 1024]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 1024, 1024, 512]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 1024, 1024, 512, 2048]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 1024, 1024, 512, 2048, 512]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 1024, 1024, 512, 2048, 512, 512]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 1024, 1024, 512, 2048, 512, 512, 2048]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 1024, 1024, 512, 2048, 512, 512, 2048, 1024]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 1024, 1024, 512, 2048, 512, 512, 2048, 1024, 1024]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 1024, 1024, 512, 2048, 512, 512, 2048, 1024, 1024, 512]
[1024]
[1024, 1024]
[1024, 1024, 512]
[1024]
[1024, 1024]
[1024, 1024, 2048]
[512]
[512, 1024]
[512, 1024, 1024]
[1024]
[512]
[1024]
[1024]
[1024]
[2048]
[2048, 1024]
[2048, 1024, 1024]
[2048, 1024, 1024, 1024]
[512]
[512]
[2048]
[2048, 2048]
[2048, 2048, 1024]
[2048, 2048, 1024, 2048]
[2048, 2048, 1024, 2048, 2048]
[2048, 2048, 1024, 2048, 2048, 2048]
[2048, 2048, 1024, 2048, 2048, 2048, 2048]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 2048]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 2048, 2048]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 2048, 2048, 2048]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 2048, 2048, 2048, 1024]
[2048, 2048, 1024, 2048, 2048, 2048, 2048, 1024, 2048, 2048, 2048, 1024, 2048]
